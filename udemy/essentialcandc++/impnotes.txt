-> LATEST COMPILER TAKES INT AS 4 BYTES
-> IF YOU DON'T INITIALISE VALUE, THEN DEFAULT IT TAKES 0 OR GARBAGE VALUE.
-> Variable sized array may not be initialised (int a[n]={12,11,2} - MAY NOT BE INITIALISED AND SHALL GIVE ARRAY)
-> for(int x:A) = for(int x=0;a[x]!='\0';x++)
-> Array is collection of similar data types

-> Structure is a collection of dissimilar data types
-> Structure is used for defining primitive data types
->struct abc{
	
}r1,r2;
this is similar to struct abc r1; and struct abc r2;

or struct abc r1,r2;


POINTER : VARIABLE USED / declared -  it will be inside stack portion

Storing in heap :
C lang:
If you want to store the data in heap section, then we use malloc().
C++ lang:
int *p;
p=new int[5];

Pointer to Array:
int a[5]={1,2,3,4,5};
int *p;
p=a (NO & is used when using pointer to array)
agar individual element use karr rahe ho then & use karo - p=&a[0]
printing elements of pointers via array - 1) cout<<p[i] (a ki jagah pointer[i] use karo if you declare int *p; p=a;)
2) cout<<*(p+i);
c++ int *A= new int(5);
c - int *A= (int*)malloc(5*sizeof(int))
delete - C++
free - C
Once the program ends, it deallocates or frees memory automatically

Though if you created pointers of different data types, they take same amount of memory (latest compiler - 8 bytes)
SO SIZEOF POINTER IS INDEPENDENT OF ITS DATA TYPE