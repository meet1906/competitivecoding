-> LATEST COMPILER TAKES INT AS 4 BYTES
-> IF YOU DON'T INITIALISE VALUE, THEN DEFAULT IT TAKES 0 OR GARBAGE VALUE.
-> Variable sized array may not be initialised (int a[n]={12,11,2} - MAY NOT BE INITIALISED AND SHALL GIVE ARRAY)
-> for(int x:A) = for(int x=0;a[x]!='\0';x++)
-> Array is collection of similar data types

-> Structure is a collection of dissimilar data types
-> Structure is used for defining primitive data types
->struct abc{
	
}r1,r2;
this is similar to struct abc r1; and struct abc r2;

or struct abc r1,r2;


POINTER : VARIABLE USED / declared -  it will be inside stack portion

Storing in heap :
C lang:
If you want to store the data in heap section, then we use malloc().
C++ lang:
int *p;
p=new int[5];

Pointer to Array:
int a[5]={1,2,3,4,5};
int *p;
p=a (NO & is used when using pointer to array)
agar individual element use karr rahe ho then & use karo - p=&a[0]
printing elements of pointers via array - 1) cout<<p[i] (a ki jagah pointer[i] use karo if you declare int *p; p=a;)
2) cout<<*(p+i);
c++ int *A= new int(5);
c - int *A= (int*)malloc(5*sizeof(int))
delete - C++
free - C
Once the program ends, it deallocates or frees memory automatically

Though if you created pointers of different data types, they take same amount of memory (latest compiler - 8 bytes)
SO SIZEOF POINTER IS INDEPENDENT OF ITS DATA TYPE

Reference
Alias to variable
int &p; // will throw error as reference should always be initialized
int &p=a;
now a and p both are same.


Pointer to structure
In c++, if we don't mention while declaring the object of the structure and just use struct name, then also its valid.

Functions
Everything inside one single function -  lets say main() -->(monolytic programing)
Modular/Procedural Programming - breaking it to smaller tasks or functions.
Parameters passed during function call are called actual parameters
Parameters passed during function definition/declaration are called formal parameters


Call by Value - ANY CHANGES DONE IN FORMAL WILL NOT AFFECT TO ACTUAL PARAMETERS
Call by Address - CHANGES IN FORMAL -> CHANGES IN ACTUAL (* and &)
Call By Reference - References - (& in func definition)
Code gets copied during func call

Arrays can be passed only via address. It can't be passed by value.
for each loop - can't be used for pointers - for(int a:A) will throw an error sayin begin and end not declared for pointer array a[].

To pass array as call by value, use structure. Have that structure have an array element.


IMPORTANT !!!
either #include<iostream> or <iostream.h> 
If you use <iostream> then use namespace std for cin,cout.

data members - facilatators
getting a private member value outside class - get(int leng) wala func - getter func
updating private member - set func - mutator func - setter func.


if you want to define func outside the class then classname::funcname() {}

Template classes - for classes for all data types
tenplate <class T>



