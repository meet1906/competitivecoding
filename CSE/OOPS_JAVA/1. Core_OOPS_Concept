###### What is OOPS?

OBJECT ORIENTED PROGRAMMING (OOP) is a programming concept that works on the principles of abstraction, encapsulation, inheritance, and polymorphism.
It allows users to create the objects that they want and then, create methods to handle those objects.
The basic concept of OOPs is to create objects, re-use them throughout the program, and manipulate these objects to get results.

###### Core OOPS concepts are

1) Class
A class is a user defined blueprint or prototype from which objects are created.It represents the set of properties or methods that are common to all objects of one type.
For example, if you had a class called “Expensive Cars” it could have objects like Mercedes, BMW, Toyota, etc.
Its properties(data) can be price or speed of these cars. While the methods may be performed with these cars are driving, reverse, braking etc.

2) Object

An object can be defined as an instance of a class, and there can be multiple instances of a class in a program.
It is a basic unit of OOP and represents the real life entities.
An Object contains both the data and the function, which operates on the data. 
For example - chair, bike, marker, pen, table, car, etc.

3) Inheritance

Inheritance is an OOPS concept in which one object acquires the properties and behaviors of the parent object.
It’s creating a parent-child relationship between two classes. It is the mechanism in java by which one class is allow to inherit the features(fields and methods) of another class.
The keyword used for inheritance is extends.

4) Polymorphism

Polymorphism refers to the ability of a variable, object or function to take on multiple forms.
For example, in English, the verb run has a different meaning if you use it with a laptop, a foot race, and business.
Here, we understand the meaning of run based on the other words used along with it.The same also applied to Polymorphism.

5) Abstraction

An abstraction is an act of representing essential features without including background details.
It is a technique of creating a new data type that is suited for a specific application.
For example, while driving a car, you do not have to be concerned with its internal working. Here you just need to concern about parts like steering wheel, Gears, accelerator, etc.

6) Encapsulation

Encapsulation is an OOP technique of wrapping the data and code. In this OOPS concept, the variables of a class are always hidden from other classes.
It can only be accessed using the methods of their current class. For example - in school, a student cannot exist without a class.

7) Association

Association is a relationship between two objects. It defines the diversity between objects.
In this OOP concept, all object have their separate lifecycle, and there is no owner.
For example, many students can associate with one teacher while one student can also associate with multiple teachers.

8) Aggregation

In this technique, all objects have their separate lifecycle. However, there is ownership such that child object can’t belong to another parent object.
For example consider class/objects department and teacher. Here, a single teacher can’t belong to multiple departments, but even if we delete the department, the teacher object will never be destroyed.

9) Composition

A composition is a specialized form of Aggregation. It is also called "death" relationship.
Child objects do not have their lifecycle so when parent object deletes all child object will also delete automatically.
For that, let’s take an example of House and rooms. Any house can have several rooms. One room can’t become part of two different houses. So, if you delete the house room will also be deleted.


          OOP	                                              POP
    
1.  Object oriented.	                                Structure oriented.
2.  Program is divided into objects.	                Program is divided into functions.
3.  Bottom-up approach.	                                Top-down approach.
4.  Inheritance property is used.	                    Inheritance is not allowed.
5.  It uses access specifier.	                        It doesn’t use access specifier.
6.  Encapsulation is used to hide the data.	            No data hiding.
7.  Concept of virtual function.	                    No virtual function.
8.  C++, Java.	                                        C, Pascal.


Object-Oriented Programming	                                                                            Structural Programming

1. Object-Oriented Programming is a type of programming which is based on               Provides logical structure to a program where programs are divided functions
   objects rather than just functions and procedures	
2. Bottom-up approach	                                                                Top-down approach
3. Provides data hiding	                                                                Does not provide data hiding
4. Can solve problems of any complexity	                                                Can solve moderate problems
5. Code can be reused thereby reducing redundancy	                                    Does not support code reusability

