                                            #################### OS Services #######################

* User interface - Almost all operating systems have a user interface (UI)
                   Varies between Command-Line (CLI), Graphics User Interface (GUI), Batch(non-interactive user interfaces)
                   
* Program execution :  
    Loads a program into memory.
    Executes the program.
    Handles program's execution.
    Provides a mechanism for process synchronization.
    Provides a mechanism for process communication.
    Provides a mechanism for deadlock handling.

* I/O Operations : 
    I/O operation means read or write operation with any file or any specific I/O device.
    Operating system provides the access to the required I/O device when required.

* File System Manipulation :  
    Program needs to read a file or write a file.
    The operating system gives the permission to the program for operation on file.
    Permission varies from read-only, read-write, denied and so on.
    Operating System provides an interface to the user to create/delete files.
    Operating System provides an interface to the user to create/delete directories.
    Operating System provides an interface to create the backup of file system.

* Communications :
    Two processes often require data to be transferred between them
    Both the processes can be on one computer or on different computers, but are connected through a computer network.
    Communication may be implemented by two methods, either by Shared Memory or by Message Passing.

* Error Handling :
    The OS constantly checks for possible errors.
    The OS takes an appropriate action to ensure correct and consistent computing.

* Resource Management :
    The OS manages all kinds of resources using schedulers.
    CPU scheduling algorithms are used for better utilization of CPU.

* Protection :
    The OS ensures that all access to system resources is controlled.
    The OS ensures that external I/O devices are protected from invalid access attempts.
    The OS provides authentication features for each user by means of passwords.



                                        #################### SYSTEM CALLS #################################
** SYSTEM CALL :
System call is the Programming interface to the services provided by the OS
A system call is the programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on.
A system call is a way for programs to interact with the operating system.                                        

** API :
The API specifies a set of functions that are available to an application programmer, including the parameters that are passed to each function and the return values the programmer can expect.
API invoke the actual system call on behalf of the application programmer.

**  Why use APIs rather than system calls?
1. Portability: An application programmer designing a program using an API can expect her program to compile and run on any system that supports the same API.
2. Actual system calls can often be more detailed and difficult to work with than the API available to an application programmer


####### TYPES OF SYSTEM CALLS :  

System calls are grouped into 5 categories
    1. Process control
    2. File management
    3. Device management
    4. Information maintenance
    5. Communication

Some of the important system calls are as follows −

* wait() : A process may wait for another process to complete its execution. This happens when a parent process creates a child process and the execution of the parent is suspended until the child executes. 
           The suspending of the parent process occurs with a wait() system call. When the child process completes execution, the control is returned back to the parent process.

* exec() : This system call runs an executable file in the context of an already running process. It replaces the previous executable file. This is known as an overlay.
           The original process identifier remains since a new process is not created but data, heap, stack etc. of the process are replaced by the new process.

* fork() : Processes use the fork() system call to create processes that are a copy of themselves. This is one of the major methods of process creation in operating systems.
           When a parent process creates a child process and the execution of the parent process is suspended until the child process executes.
           When the child process completes execution, the control is returned back to the parent process.

* exit() : The exit() system call is used by a program to terminate its execution. In a multithreaded environment, this means that the thread execution is complete.
           The operating system reclaims resources that were used by the process after the exit() system call.

* kill() : The kill() system call is used by the operating system to send a termination signal to a process that urges the process to exit.
           However, kill system call does not necessary mean killing the process and can have various meanings.

