                                    ################## TRANSACTION #####################

####### What are Transactions?

Transactions is a set of tasks grouped into a single execution unit. Each transaction begins with a specific task and ends when all the tasks in the group successfully complete.
If any of the tasks fail, the transaction fails. Therefore, a transaction has only two results: success or failure. 

Incomplete steps result in the failure of the transaction. A database transaction, by definition, must be atomic, consistent, isolated and durable. These are popularly known as ACID properties. 



####### How to implement Transactions using SQL?

Following commands are used to control transactions. 
It is important to note that these statements cannot be used while creating tables and are only used with the DML Commands such as – INSERT, UPDATE and DELETE. 
 

1. BEGIN TRANSACTION: It indicates the start point of an explicit or local transaction. 

   Syntax: BEGIN TRANSACTION transaction_name ;



2. SET TRANSACTION: Places a name on a transaction. 

   Syntax: SET TRANSACTION [ READ WRITE | READ ONLY ];



3. COMMIT: If everything is in order with all statements within a single transaction, all changes are recorded together in the database is called committed.
           The COMMIT command saves all the transactions to the database since the last COMMIT or ROLLBACK command. 
 

   Syntax: COMMIT;


4. ROLLBACK: If any error occurs with any of the SQL grouped statements, all changes need to be aborted. The process of reversing changes is called rollback.
             This command can only be used to undo transactions since the last COMMIT or ROLLBACK command was issued. 

   Syntax: ROLLBACK;

5. SAVEPOINT: creates points within the groups of transactions in which to ROLLBACK. 
              A SAVEPOINT is a point in a transaction in which you can roll the transaction back to a certain point without rolling back the entire transaction. 

Syntax for Savepoint command: SAVEPOINT SAVEPOINT_NAME;

//This command is used only in the creation of SAVEPOINT among all the transactions. 
//In general ROLLBACK is used to undo a group of transactions. 

Syntax for rolling back to Savepoint command: ROLLBACK TO SAVEPOINT_NAME


6. RELEASE SAVEPOINT:- This command is used to remove a SAVEPOINT that you have created. 

Syntax: RELEASE SAVEPOINT SAVEPOINT_NAME



                                ############################# ACID PROPERTIES ######################################
                                
1. Atomicity : 

By this, we mean that either the entire transaction takes place at once or doesn’t happen at all. There is no midway i.e. transactions do not occur partially.
Each transaction is considered as one unit and either runs to completion or is not executed at all. It involves the following two operations.

        * Abort: If a transaction aborts, changes made to database are not visible.
        * Commit: If a transaction commits, changes made are visible.

Atomicity is also known as the ‘All or nothing rule’.
                               
EG:  X has 500  and Y has 200
     X transfers 100 to Y ( So, ideally X should have 400 and Y have 300 after completing the transaction )
     Now if X is debited 100 but Y doesn't get 100 credited, it results in inconsistency. Therefore it won't be executed
                             
2. Consistency

This means that integrity constraints must be maintained so that the database is consistent before and after the transaction. It refers to the correctness of a database.

Referring to the example above,

The total amount before and after the transaction must be maintained.
Total before T occurs = 500 + 200 = 700.
Total after T occurs = 400 + 300 = 700.
Therefore, database is consistent. Inconsistency occurs in case T1 completes but T2 fails. As a result T is incomplete.

3. Isolation

This property ensures that multiple transactions can occur concurrently without leading to the inconsistency of database state.Transactions occur independently without interference. 
Changes occurring in a particular transaction will not be visible to any other transaction until that particular change in that transaction is written to memory or has been committed.

This property ensures that the execution of transactions concurrently will result in a state that is equivalent to a state achieved these were executed serially in some order. 

4. Durability:
This property ensures that once the transaction has completed execution, the updates and modifications to the database are stored in and written to disk and they persist even if a system failure occurs.
These updates now become permanent and are stored in non-volatile memory. The effects of the transaction, thus, are never lost.



