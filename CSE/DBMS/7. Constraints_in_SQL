                                            ############ CONSTRAINTS ################

1. NOT NULL

If we specify a field in a table to be NOT NULL. Then the field will never accept null value. That is, you will be not allowed to insert a new row in the table without specifying any value to this field.

For example, the below query creates a table Student with the fields ID and NAME as NOT NULL. That is, we are bound to specify values for these two fields every time we wish to insert a new row.

CREATE TABLE Student
(
ID int(6) NOT NULL,
NAME varchar(10) NOT NULL,
ADDRESS varchar(20)
);


2. UNIQUE

This constraint helps to uniquely identify each row in the table. i.e. for a particular column, all the rows should have unique values. We can have more than one UNIQUE columns in a table.

For example, the below query creates a tale Student where the field ID is specified as UNIQUE. i.e, no two students can have the same ID. Unique constraint in detail.

CREATE TABLE Student
(
ID int(6) NOT NULL UNIQUE,
NAME varchar(10),
ADDRESS varchar(20)
);


3. PRIMARY KEY

Primary Key is a field which uniquely identifies each row in the table. If a field in a table is primary key, then the field will not have NULL values and should have unique values for this field.

So, in other words we can say that this is combination of NOT NULL and UNIQUE constraints.

A table can have only one field as primary key.Below query will create a table named Student and specifies the field ID as primary key.

CREATE TABLE Student
(
ID int(6) NOT NULL UNIQUE,
NAME varchar(10),
ADDRESS varchar(20),
PRIMARY KEY(ID)
);


4. FOREIGN KEY

Foreign Key is a field in a table which uniquely identifies each row of a another table.
That is, this field points to primary key of another table. This usually creates a kind of link between the tables.

Assume we have field C_ID in Orders table as the primary key in Customers table, i.e. it uniquely identifies each row in the Customers table. 
Therefore, it is a Foreign Key in Orders table.

Syntax:

CREATE TABLE Orders
(
O_ID int NOT NULL,
ORDER_NO int NOT NULL,
C_ID int,
PRIMARY KEY (O_ID),
FOREIGN KEY (C_ID) REFERENCES Customers(C_ID)
)


5. CHECK

Using the CHECK constraint we can specify a condition for a field, which should be satisfied at the time of entering values for this field.

Eg. the below query creates a table Student and specifies the condition for the field AGE as (AGE >= 18 ). i.e the user will not be allowed to enter any record in the table with AGE < 18. 

CREATE TABLE Student
(
ID int(6) NOT NULL,
NAME varchar(10) NOT NULL,
AGE int NOT NULL CHECK (AGE >= 18)
);


6. DEFAULT

This constraint is used to provide a default value for the fields. i.ek if the user does not specify any value for these fields then the default value will be assigned to them.

For example, the below query will create a table named Student and specify the default value for the field AGE as 18.

CREATE TABLE Student
(
ID int(6) NOT NULL,
NAME varchar(10) NOT NULL,
AGE int DEFAULT 18
);



